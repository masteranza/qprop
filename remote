#!/bin/bash -u
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PINK=$(tput setaf 5)
BLACK=$(tput setaf 0)
NC=$(tput sgr0)
INFC="${YELLOW}"

upload=0
run=0
view=0
download=0
clean=0
# Used to kill processes by $user
kill=0
# Used to develop QPROP to commits changes in project and it's submodules
# to print the names of all submodules use
# git config --file .gitmodules --get-regexp path | awk '{ print $2 }'
# or
# git submodule--helper list
gitrefresh=0
# possible options u, ur, urv, r, v, d, c
proj=""
index=1
dryrun=0
declare -i index
host=""
user="ranza"
sourceDir="./"
targetDir="~"
qpropDir="qprop"
resultsDir="~/Results"
resultsLocalDir=~/Results
gitrepo="git@github.com:masteranza/qprop.git"
err_str="${RED}Error:${INFC}"
suc_str="${GREEN}Success!${NC}"
err_arg_order="$err_str Arguments passed to 'remote' should always go first! (before those to run or im/re/isurfv/tsurff)"
conf='config' #Default config

# Used to preview all the commands called (good for DEBUG)
# set -x
# Nice exit messages
exit_trap() {
        local lc="$BASH_COMMAND" rc=$?
        if [[ $rc -eq 0 ]]; then
                echo "$suc_str"
        else
                echo "$err_str Command [$lc] exited with code [$rc]"
        fi
        if [[ $rc -eq 12 ]]; then
                custompath="/home/$user"
                read -p "${PINK}Looks like rsync can't be found on $host. Attempt auto-install rsync locally on server? Press ENTER to continue.${NC}"
                ssh $address "wget https://download.samba.org/pub/rsync/src/rsync-3.2.3.tar.gz
                        tar -xf rsync-3.2.3.tar.gz
                        cd rsync-3.2.3/
                        ./configure --disable-openssl --disable-xxhash --disable-zstd --disable-lz4 --prefix=$custompath
                        make
                        make install
                        rm -rf ../rsync-3.2.3
                        rm -rf ../rsync-3.2.3.tar.gz
                        "

                echo "${INFC}Install completed.${NC}"
                custompath="--rsync-path=$custompath/bin/rsync"
                echo $custompath >"conf/${host}.conf"
        fi
        if [[ $rc -eq 23 ]]; then
                if [[ "$experiment" != "" ]]; then
                        echo "$err_str experiment directory ${GREEN}$experiment${INFC} not found.${NC}"
                fi
        fi
}

trap exit_trap EXIT
set -e

#TODO: install rsync locally from source if not available

#INPUT LOOP
while [[ $# -gt 0 && $index -eq $# || $index -lt $# ]]; do
        # echo "$index / $# : ${!index}"
        case "${!index}" in
        --host* | -host* | host*) #needs to be removed
                [[ $index -gt 1 ]] && echo "$err_str -host found later." && exit 1
                host=$(echo $1 | sed -e 's/^[^=]*=//g')
                if [[ $host = "" ]]; then
                        echo "$err_str Mising value for option host= / -host=. Enter it without space!${NC}"
                else
                        echo "${INFC}About to connect with: ${GREEN}$host${NC}"
                fi
                shift
                ;;
        --user* | -user* | user*) #needs to be removed
                [[ $index -gt 1 ]] && echo "$err_str -user found later." && exit 1
                user=$(echo $1 | sed -e 's/^[^=]*=//g')
                if [[ $user = "" ]]; then
                        echo "$err_str Mising value for option user= / -user=. Enter it without space!${NC}"
                else
                        echo "${INFC}Setting the user to: ${GREEN}$user${NC}"
                fi
                shift
                ;;
        # --targetDir* | -targetDir* | targetDir*) #needs to be removed
        #         [[ $index -gt 1 ]] && echo "$err_str -targetDir found later." && exit 1
        #         targetDir=$(echo $1 | sed -e 's/^[^=]*=//g')
        #         if [[ $targetDir = "" ]]; then
        #                 echo "${INFC}QPROP will be placed in home directory${NC}"
        #                 targetDir="~"
        #                 # echo "$err_str Mising value for option -targetDir=. Enter it without space!${NC}"
        #         else
        #                 echo "${INFC}Setting the tagetDir to: ${GREEN}$targetDir${NC}"
        #         fi
        #         shift
        #         ;;
        -action | --action)
                shift
                [[ $index -gt 1 ]] && echo "$err_str -action found later." && exit 1
                # if [[ $1 =~ "u" || $1 =~ "r" || $1 =~ "v" || $1 =~ "d" || $1 =~ "c" || $1 =~ "s" ]]; then
                if [[ $1 =~ "u" ]]; then
                        upload=1
                fi
                if [[ $1 =~ "r" ]]; then
                        run=1
                fi
                if [[ $1 =~ "g" ]]; then
                        gitrefresh=1
                fi
                if [[ $1 =~ "v" ]]; then
                        view=1
                fi
                if [[ $1 =~ "d" ]]; then
                        download=1
                fi
                if [[ $1 =~ "c" ]]; then
                        clean=1
                fi
                if [[ $1 =~ "k" ]]; then
                        kill=1
                fi
                # else
                # echo "$err_str Missing value for option -action / --action. Use u (upload), r (run), v (view), d (download) or c (clean).${NC}"
                # exit 1
                # fi
                shift
                ;;
        -dryrun | -dry-run | --dry-run | --dryrun) #needs to stay
                dryrun=1
                index+=1
                ;;
        --proj* | -proj* | proj*) #needs to stay
                # [[ $index -gt 1 ]] && echo "$err_str -proj found later." && exit 1
                proj=$(echo $1 | sed -e 's/^[^=]*=//g')
                if [[ $proj = "" ]]; then
                        echo "$err_str Mising value for option proj= / -proj=. Enter it without space!${NC}"
                else
                        echo "${INFC}Running project: ${GREEN}$proj${NC}"
                fi
                index+=1
                ;;
        -C | --conf_file) #needs to stay
                index+=1
                conf="${!index}"
                index+=1
                ;;
        *)
                index+=1
                # break
                ;;
        esac
done

if [[ $gitrefresh = 1 ]]; then
        git submodule foreach 'git add . && git diff-index --quiet HEAD || git commit -m "auto remote submodule commit"'
        git add . && git diff-index --quiet HEAD || (git commit -m "auto remote commit" && echo "${GREEN}Auto-commit${NC}")
        git push --recurse-submodules=on-demand && echo "${GREEN}Repo pushed to remote${NC}"
        # git diff-index --quiet HEAD || (git commit -m "auto remote commit" && git push && echo "${GREEN}Repo pushed from local${NC}")
fi
[[ "$host" == "" ]] && echo "$err_str You need to pass host name using -host=hostname${NC}" && exit 1
#Change username to your own
address="$user@$host"

if [[ $gitrefresh = 1 ]]; then
        #Time to give github to refresh
        sleep 1
        ssh $address '
        cd '${targetDir}'
        # if [[ "'${targetDir}'" != "~" ]]; then
        #         [[ -d '$targetDir' ]] || mkdir -p '$targetDir'
        #         cd '$targetDir'
        # fi
        if [[ -d '$qpropDir' ]]; then
                cd '$qpropDir'
        fi
        (git pull && git submodule update --recursive && echo "'${GREEN}'Repo pulled to '${host}${NC}'") || (git clone --recurse-submodules '$gitrepo' && echo "'${GREEN}'Repo cloned to '${host}${NC}'") || (echo "'$err_str' Problem cloning repository'${NC}'" && exit 1)'
fi

#Exit if no actions passed
[[ $clean = 0 && $upload = 0 && $run = 0 && $download = 0 && $view = 0 && $kill = 0 ]] && echo "${BLUE}Hint:${INFC} You need to pass an -action u/r/v/d/c/g to do something :)${NC}" && exit 0

#clean routine
if [[ $clean = 1 ]]; then
        read -p "${PINK}Source code will be removed from ${GREEN}${targetDir}/${qpropDir}${PINK} on ${GREEN}$host${PINK}. Press ENTER to continue.${NC}"
        echo "ssh $address 'rm -rf $targetDir/$qpropDir'"
        ssh $address 'rm -rf '$targetDir/$qpropDir''
fi

#kill routine
if [[ $kill = 1 ]]; then
        read -p "${PINK}All processes of user ${GREEN}$user${PINK} on ${GREEN}$host${PINK} will be killed. Press ENTER to continue.${NC}"
        echo "ssh $address 'pkill -u '$user'"
        ssh $address 'killall -u '$user''
fi

#UPLOAD routine
if [[ $upload = 1 ]]; then
        if (test -f "conf/${host}.conf"); then
                custompath=$(<"conf/${host}.conf")
                echo "${INFC}Using $custompath from conf/${host}.conf${NC}"
        else
                custompath=""
        fi
        #Create any directories if needed
        # ssh $address 'if [[ '${targetDir}' != "" ]]; then
        # [[ -d '$targetDir' ]] || mkdir -p '$targetDir'
        # fi'
        #Dry-run
        rsync $custompath -avhr --dry-run --exclude='.vscode' --exclude='lib' --exclude='.git' --exclude='.DS_Store' --exclude='*.o' --exclude='*.a' --exclude='*.dat' --exclude='*.log' --exclude='im' --exclude='re' --exclude='isurfv' --exclude='tsurff' --exclude='tsurff-mpi' $sourceDir $address:$targetDir/$qpropDir
        #Ask
        read -p "${PINK}This  will be ${GREEN}uploaded${PINK} to ${GREEN}$host${PINK}. Press ENTER to continue.${NC}"
        #Upload
        rsync $custompath -avhr --exclude='.git' --exclude='.git/*' --exclude='.DS_Store' --exclude='*.o' --exclude='*.a' --exclude='*.dat' --exclude='*.log' --exclude='im' --exclude='re' --exclude='isurfv' --exclude='tsurff' --exclude='tsurff-mpi' $sourceDir $address:$targetDir/$qpropDir

fi

#Check if we need to continue
[[ $run = 0 && $download = 0 && $view = 0 ]] && exit 0

[[ "$proj" = "" ]] && echo "$err_str  You need to pass project name using -proj=projectname.${NC}" && exit 1

[[ $dryrun -eq 1 ]] && echo "${BLUE}Dry-run will be enabled on remote execution${NC}."

if [[ $run = 1 ]]; then
        read -p "${PINK}About to ${GREEN}run${PINK} \"./run $@\" on $host${PINK}. If not sure, try -dryrun first. Press ENTER to continue.${NC}"
        ssh $address 'cd '$targetDir/$qpropDir'; ./bk ./run '$@';'
fi

experiment=$(grep -hr --include=''$conf'.param' -e "exp-name" projects/$proj | awk '{print $3}')
expFolder=''
# echo $experiment
if [[ "$experiment" != "" ]]; then
        expFolder="$experiment/"
        echo "${INFC}Experiment name exp-name = ${GREEN}$experiment${NC}"
fi
if [[ $download = 1 ]]; then
        if (test -f "conf/${host}.conf"); then
                custompath=$(<"conf/${host}.conf")
                echo "${INFC}Using ${GREEN}$custompath${INFC} from ${GREEN}conf/${host}.conf${NC}"
        else
                custompath=""
        fi

        rsync $custompath -chavzP --dry-run --stats --exclude='*isurfv.dat' --exclude='*.raw' $address:$resultsDir/$proj/$expFolder $resultsLocalDir/$proj/$expFolder
        read -p "${PINK}Those files will be downloaded from ${GREEN}$host: $resultsDir/$proj/$expFolder${PINK} to ${GREEN}$resultsLocalDir/$proj/$expFolder${PINK}. Press ENTER to continue. ${NC}"

        # echo "mkdir -p $resultsLocalDir"
        # mkdir -p $resultsLocalDir
        echo "mkdir -p $resultsLocalDir/$proj"
        mkdir -p $resultsLocalDir/$proj
        if [[ "$experiment" != "" ]]; then
                echo "mkdir -p $resultsLocalDir/$proj/$expFolder"
                mkdir -p $resultsLocalDir/$proj/$expFolder
        fi
        rsync $custompath -chavzP --stats --exclude='*isurfv.dat' --exclude='*.raw' $address:$resultsDir/$proj/$expFolder $resultsLocalDir/$proj/$expFolder
fi

if [[ $view = 1 ]]; then
        # ssh $address 'echo -e "'${RED}'Results directories:'${NC}'";
        # ls -o '$resultsDir''
        ssh $address 'echo -e "'${RED}'RUNNING TASKS:'${NC}'"
        if [[ "$OSTYPE" == "darwin"* ]]; then
                top -l 1 -stats pid,user,cpu,command -user '$user' | egrep -w "im|re|isurfv|tsurff" | grep -v "grep"
        else
                top -bn1 -c -w512 -u '$user' | egrep "im|re|isurfv|tsurff" | grep -v "grep"
        fi
        eval resultsDir='$resultsDir'
        eval targetDir='$targetDir/$qpropDir'

        if [ ! -d "$resultsDir/'$proj'/'$expFolder'" ]; then
                echo "'$err_str' Results directory '${GREEN}'$resultsDir/'$proj'/'$expFolder${INFC}' does not exist on server '${GREEN}$host${NC}'." 
        else
                cd '$resultsDir'/'$proj'/'$expFolder'

                echo -e "\n'${RED}'IM LOGS:'${NC}'"
                find . -type f -name "im*.log" | sort | while read i
                do 
                        
                        k=""
                        if grep -q "Execution time:" "$i" ; then
                                k="'${GREEN}'finished: '${NC}'"
                                k+=$(grep "Execution time:" "$i")
                                finished+=1
                        else 
                                k="'${PINK}'current: '${NC}'"
                                k+=$(grep "CALCULATING STATE Z" "$i" | tail -n 1)
                                k+="'${PINK}' progress: '${NC}'"
                                k+=$(tail -n 1 "$i")
                        fi
                        printf "'${BLUE}'File: %25s'${NC}' %s\n" "$i" "$k"
                done
                
                echo -e "\n'${RED}'RE LOGS:'${NC}'"
                find . -type f -name "re*.log" | sort | while read i
                do 
                        
                        k=""
                        if grep -q "Execution time:" "$i" ; then
                                k="'${GREEN}'finished: '${NC}'"
                                k+=$(grep "Execution time:" "$i")
                                finished+=1
                        else 
                                k="'${PINK}'progress: '${NC}'"
                                # k+=$(grep "CALCULATING STATE Z" "$i" | tail -n 1)
                                # k+="'${PINK}' progress: '${NC}'"
                                k+=$(tail -n 1 "$i")
                        fi
                        printf "'${BLUE}'File: %25s'${NC}' %s\n" "$i" "$k"
                done

                echo -e "\n'${RED}'ISURFV LOGS:'${NC}'"
                find . -type f -name "is*.log" | sort | while read i
                do 
                        echo "'${BLUE}'File: $i'${NC}'" 
                        tail -n 4 "$i"
                        echo
                done

                echo -e "\n'${RED}'TSURFF LOGS:'${NC}'"
                find . -type f -name "ts*.log" | sort  | while read i
                do  
                        echo "'${BLUE}'File: $i'${NC}'" 
                        tail -n 4 "$i"
                        echo
                done
        fi

        if [ ! -d "$targetDir" ]; then
                echo "'$err_str' directory '${GREEN}'$targetDir'${INFC}' does not exist on server '${GREEN}$host${NC}'." 
                exit 0
        fi

        echo -e "\n'${RED}'RUNNER LOGS:'${NC}'"
        cd $targetDir
        find . -type f -name "run*.log" | grep '$conf' | while read i
        do 
                echo "'${BLUE}'File: $i'${NC}'" 
                tail -n 10 "$i"
                echo
        done
        '

fi
